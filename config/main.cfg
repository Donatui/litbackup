#!/bin/bash

# Copyright 2014, Vytenis Sabaliauskas <vytenis.adm@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

#NOTE: order of these parameters is important

### -- SHARED PARAMETERS ---

#FQDN of the server we need to backup:
SERVER="example.com"

#Directory with all backups of all servers, not just $SERVER:
BACKUPROOT="/mnt/largefs"

#Directory with backup scripts:
CURRENTDIR=`dirname "${BASH_SOURCE[0]}"`

#Where rsync should sync the latest files ( "/" at the end is needed):
BACKUPDIR="$BACKUPROOT/$SERVER/latest/"

#Directory with all LitBackup scripts and directories (one level up than CURRENTDIR):
LITBACKUPROOT=`dirname $CURRENTDIR`

#File to look whether backup is running:
LOCKFILE="$BACKUPROOT/$SERVER-backup-job.run"

#File with current status of backups:
STATUSFILE="$BACKUPROOT/$SERVER-backup-status-dont-remove-important"

#Where list generated by FILELISTGENERATOR should be:
FILESLIST="$BACKUPROOT/$SERVER-file-list-to-backup-dont-remove-important"

#Force start another backup if last backup failed, otherwise exit with error. "yes" or "no":
FORCEAFTERFAILED="yes"

### -- BACKUP SCRIPT PARAMETERS ---

#Folder list for a full rsync . Eg.":/path/to/file :/path/to/directory/" (see "man rsync"). Note - also used in "$FILELISTGENERATOR" find with stripped ":":
DIRSTOBACKUP=":/var :/home"

#Agent script to execute on remote server, which generates files to backup:
FILELISTGENERATOR="$LITBACKUPROOT/system/filelist-generator.sh"

#Uncomment to force monthly full backups - for a piece of mind, just in case. Define a day of month - either fixed (0..28) or generated from $SERVER to balance automatically:
#FORCEFULLON=`set|md5sum|tr -d [:alpha:] | awk '{print substr($1,3,2) % 28}'`

#File with the list if files rsync should exclude (see "--exclude-from" in "man rsync" for syntax):
EXCLUDESFILE="$LITBACKUPROOT/config/backup-excludes.cfg"

#Secret key file to use when connecting to remote server (for rsync, ssh and scp to use):
SSHPRIVATEKEY="/etc/ssh/ssh_host_rsa_key"

#SSH user to connect as:
SSHUSER="root"

#SSH port to use:
SSHPORT="22"

#Full rsync with ssh parameters command to execute. This is used when doing an initial backup - it sync's all files.:
FULLRSYNC="/usr/bin/rsync -rqaxR --delete --log-file=$STATUSFILE --exclude-from $EXCLUDESFILE -e \"ssh -p $SSHPORT -o StrictHostKeyChecking=no -i $SSHPRIVATEKEY\" $SSHUSER@$SERVER$DIRSTOBACKUP $BACKUPDIR"

#Periodic rsync with ssh parameters command to execute. This is used when doing a periodic (daily) backup. It syncs only certain files:
REGULARRSYNC="/usr/bin/rsync -rqaxRO --delete --log-file=$STATUSFILE --files-from=$FILESLIST --exclude-from $EXCLUDESFILE -e \"ssh -p $SSHPORT -o StrictHostKeyChecking=no -i $SSHPRIVATEKEY\" $SSHUSER@$SERVER:/ $BACKUPDIR"

### -- ROTATION SCRIPT PARAMETERS ---

#Before which hour treat successfull backups as yesterdays (0..23). Eg. if set to 5, backups finished on 0:01, 3:34, 4:59 and so on will be dated with yesterdays date.
LASTDAYBEFOREHOUR=5

#How many backups (daily, weekly and monthly) to store:
NUMOFDAILY=6
NUMOFWEEKLY=4
NUMOFMONTHLY=2

#On which weekday to move weeklies (1..7):
WEEKLYDAY=6

#On which month day to move monthlies (1..28):
MONTHLYDAY=1

#Compression: find all files in last backup with no hard links and compress them ("yes" or anything else for "no"):
COMPRESSFILES="no"

#Suffix for "gzip -S" to add. Must be unique to distinguish:
GZIPSUFFIX=".a8X77dvPabcRb9ef02-BACKUP.gz"

# "find" and "gzip" parameters to use for compression:
COMPRESSFINDPARAMS="-type f -links 1 -size +1M -not -iname \"*jpg\" -not -iname \"*gif\" -not -iname \"*avi\" -not -iname \"*.tar*\" -not -name \"*.tgz\" -not -name \"*.gz\" -exec gzip -v -S $GZIPSUFFIX {} \;"

